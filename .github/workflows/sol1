import sys
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout,
    QLineEdit, QPushButton, QLabel, QMessageBox, QFileDialog
)
from PyQt6.QtGui import QPixmap, QDragEnterEvent, QDropEvent, QImageReader
from PyQt6.QtCore import Qt


class ProfileScreen(QWidget):
    def __init__(self, username):
        super().__init__()
        self.setWindowTitle("Личный профиль")
        self.setGeometry(100, 100, 300, 300)

        self.layout = QVBoxLayout()

        self.welcome_label = QLabel(f"Добро пожаловать, {username}!")
        self.layout.addWidget(self.welcome_label)

        self.photo_label = QLabel("Фотография пользователя:")
        self.layout.addWidget(self.photo_label)

        self.photo_display = QLabel(self)
        self.photo_display.setFixedSize(100, 100)  # Устанавливаем фиксированный размер для отображения фото
        self.photo_display.setStyleSheet("border: 1px solid black;")  # Добавляем рамку для QLabel
        self.photo_display.setAcceptDrops(True)  # Разрешаем перетаскивание
        self.layout.addWidget(self.photo_display)

        self.upload_button = QPushButton("Загрузить фотографию", self)
        self.upload_button.clicked.connect(self.upload_photo)
        self.layout.addWidget(self.upload_button)

        self.logout_button = QPushButton("Выйти", self)
        self.logout_button.clicked.connect(self.logout)
        self.layout.addWidget(self.logout_button)

        self.setLayout(self.layout)

            # Установка стилей
        self.setStyleSheet("""
            QWidget {
                background-color: #ADD8E6;  /* Светло-голубой фон */
            }
            QPushButton {
                background-color: #00BFFF;  /* Голубой цвет кнопок */
                color: white;  /* Цвет текста кнопок */
                border: none;  /* Убираем рамку */
                padding: 10px;  /* Отступы */
                border-radius: 5px;  /* Закругленные углы */
            }
            QPushButton:hover {
                background-color: #1E90FF;  /* Цвет кнопки при наведении */
            }
        """)

    def set_default_photo(self):
        # Загружаем изображение по умолчанию
        pixmap = QPixmap("Users\Полина\Pictures\admin_photo.png")
        self.photo_label.setPixmap(pixmap)
        self.photo_label.setScaledContents(True)
        # Масштабируем изображение, чтобы оно вписывалось в QLabel
        self.photo_label.setFixedSize(100, 100)
        # Устанавливаем фиксированный размер для QLabel

    def upload_photo(self):
        # Открываем диалог выбора файла options = QFileDialog.Option()
        file_name, _ = QFileDialog.getOpenFileName(self, "Выберите фотографию", "", "Images (*.png *.jpg *.jpeg *.bmp *.gif);;All Files (*)", options=options)
        if file_name:
            self.set_photo(file_name)

    def set_photo(self, file_name):
        pixmap = QPixmap(file_name)  # Загружаем изображение
        pixmap = pixmap.scaled(self.photo_display.size(), aspectRatioMode=True)  # Масштабируем изображение
        self.photo_display.setPixmap(pixmap)  # Отображаем изображение в QLabel

    def dragEnterEvent(self, event: QDragEnterEvent):
        if event.mimeData().hasImage():
            event.acceptProposedAction()

    def dropEvent(self, event: QDropEvent):
        if event.mimeData().hasImage():
            # Получаем путь к изображению
            file_name = event.mimeData().urls()[0].toLocalFile()
            self.set_photo(file_name)

    def logout(self):
        self.login_screen = LoginScreen()
        self.login_screen.show()
        self.close()



class RegistrationScreen(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Регистрация")
        self.setGeometry(100, 100, 300, 200)

        self.layout = QVBoxLayout()

        self.username_input = QLineEdit(self)
        self.username_input.setPlaceholderText("Введите имя пользователя")
        self.password_input = QLineEdit(self)
        self.password_input.setPlaceholderText("Введите пароль")
        self.password_input.setEchoMode(QLineEdit.EchoMode.Password)

        self.confirm_password_input = QLineEdit(self)
        self.confirm_password_input.setPlaceholderText("Подтвердите пароль")
        self.confirm_password_input.setEchoMode(QLineEdit.EchoMode.Password)

        self.register_button = QPushButton("Зарегистрироваться", self)
        self.register_button.clicked.connect(self.register)

        self.layout.addWidget(self.username_input)
        self.layout.addWidget(self.password_input)
        self.layout.addWidget(self.confirm_password_input)
        self.layout.addWidget(self.register_button)

        self.setLayout(self.layout)

            # Установка стилей
        self.setStyleSheet("""
            QWidget {
                background-color: #FFB6C1;  /* Светло-розовый фон */
            }
            QPushButton {
                background-color: #FF69B4;  /* Темно-розовый цвет кнопок */
                color: white;  /* Цвет текста кнопок */
                border: none;  /* Убираем рамку */
                padding: 10px;  /* Отступы */
                border-radius: 5px;  /* Закругленные углы */
            }
            QPushButton:hover {
                background-color: #FF1493;  /* Цвет кнопки при наведении */
            }
        """)

    def register(self):
        username = self.username_input.text()
        password = self.password_input.text()
        confirm_password = self.confirm_password_input.text()

        if password == confirm_password:
            # В реальном приложении здесь должна быть логика для сохранения пользователя
            QMessageBox.information(self, "Успех", "Вы успешно зарегистрированы!")
            self.open_profile(username)
        else:
            QMessageBox.warning(self, "Ошибка", "Пароли не совпадают.")

    def open_profile(self, username):
        self.profile_screen = ProfileScreen(username)
        self.profile_screen.show()
        self.close()



class LoginScreen(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Вход")
        self.setGeometry(100, 100, 300, 200)

        self.layout = QVBoxLayout()

        self.username_input = QLineEdit(self)
        self.username_input.setPlaceholderText("Введите имя пользователя")
        self.password_input = QLineEdit(self)
        self.password_input.setPlaceholderText("Введите пароль")
        self.password_input.setEchoMode(QLineEdit.EchoMode.Password)

        self.login_button = QPushButton("Войти", self)
        self.login_button.clicked.connect(self.login)

        self.register_button = QPushButton("Регистрация", self)
        self.register_button.clicked.connect(self.open_registration)

        self.layout.addWidget(self.username_input)
        self.layout.addWidget(self.password_input)
        self.layout.addWidget(self.login_button)
        self.layout.addWidget(self.register_button)

        self.setLayout(self.layout)
        
        # Установка стилей
        self.setStyleSheet("""
            QWidget {
                background-color: #E6E6FA;  /* Светло-сиреневый фон */
            }
            QPushButton {
                background-color: #9370DB;  /* Темно-сиреневый цвет кнопок */
                color: white;  /* Цвет текста кнопок */
                border: none;  /* Убираем рамку */
                padding: 10px;  /* Отступы */
                border-radius: 5px;  /* Закругленные углы */
            }
            QPushButton:hover {
                background-color: #8A2BE2;  /* Цвет кнопки при наведении */
            }
        """)

    def login(self):
        username = self.username_input.text()
        password = self.password_input.text()

        # Проверка учетных данных
        if (username == "user" and password == "password") or (username == "administrator" and password == "pass"):
            self.open_profile(username)
        else:
            QMessageBox.warning(self, "Ошибка", "Неверное имя пользователя или пароль.")

    def open_profile(self, username):
        self.profile_screen = ProfileScreen(username)
        self.profile_screen.show()
        self.close()

    def open_registration(self):
        self.registration_screen = RegistrationScreen()
        self.registration_screen.show()
        self.close()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    login_screen = LoginScreen()
    login_screen.show()
    sys.exit(app.exec())

